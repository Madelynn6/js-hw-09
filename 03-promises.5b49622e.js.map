{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCC,YAAW,IAAMJ,EAAQ,C,SAAEH,E,MAAUC,KAAUA,GAE/CM,YAAW,IAAMH,EAAO,C,SAAEJ,E,MAAUC,KAAUA,EAAM,G,CAK7CO,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAaC,OAAOH,EAAMI,cAAc,GAAGC,OAC3CC,EAAYH,OAAOH,EAAMI,cAAc,GAAGC,OAC1CE,EAASJ,OAAOH,EAAMI,cAAc,GAAGC,OAG7C,IAAI,IAAIG,EAAE,EAAGA,EAAED,EAAQC,IAAI,CAIzBpB,EAHiBoB,EAAE,EACLN,EAAaI,EAAYE,GAGxCC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAAxB,GAASyB,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAEzEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAAxB,GAASyB,OAAOG,QAAQ,sBAAoBzB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      setTimeout(() => resolve({ position, delay }), delay);\n    } else {\n      setTimeout(() => reject({ position, delay }), delay);\n    }\n  });\n}\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const firstDelay = Number(event.currentTarget[0].value)\n  const delayStep = Number(event.currentTarget[1].value)\n  const amount = Number(event.currentTarget[2].value)\n\n\n  for(let i=0; i<amount; i++){\n    const position = i+1;\n    const delay = firstDelay + delayStep * i;\n\n    createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    }}\n\n\n\n\n  // Napisz skrypt, który po wysłaniu formularza wywoła funkcję \n  // createPromise(position, delay) tyle razy, ile wprowadzono w \n  // pole amount. Po każdym wywołaniu przekaż jej numer utworzonej \n  // obietnicy (position) i opóźnienie, uwzględniając wprowadzone przez \n  // użytkownika pierwsze opóźnienie (delay) i stopień (step).\n\n  // Uzupełnij kod funkcji createPromise tak, aby przywracała jedną \n  // obietnicę, którą realizuje się lub odkłada poprzez delay czasu. \n  // Wartością obietnicy powinien być obiekt, w którym będą właściwości \n  // position i delay z wartościami parametrów o tej samej nazwie. \n  // Użyj kodu początkowego funkcji, aby wybrać to, co należy zrobić \n  // z obietnicą - zrealizować lub odłożyć."],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","firstDelay","Number","currentTarget","value","delayStep","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.5b49622e.js.map"}